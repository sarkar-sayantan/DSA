class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int nonWrapSum = 0;
        int wrapSum = 0;
        nonWrapSum = kadane(nums);
        for(int i=0;i<nums.length;i++){
            wrapSum+=nums[i];
            nums[i] = -nums[i];
        }
        int nonConSum = -kadane(nums);
        if(wrapSum == nonConSum) {
            return nonWrapSum;
        }
        return Math.max(nonWrapSum, wrapSum - (-kadane(nums)));
    }

    public int kadane(int[] nums) {
        int currentMax = 0;
        int maxSum = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            currentMax = Math.max(nums[i], currentMax + nums[i]);
            maxSum = Math.max(maxSum, currentMax);
        }
        return maxSum;
    }
}
