class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int N = envelopes.length;

        if (N == 0)
        return N;

        // Sort the envelopes in increasing
        // order of width and decreasing order
        // of height is width is same
        Arrays.sort(envelopes,new Comparator<int[]>() {
        @Override
        public int compare(int[] a,
                            int[] b)
        {
            return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0];
        }
        });
        ArrayList<Integer> dp = new ArrayList<Integer>();

        // Finding LIS of the heights
        // of the envelopes
        for (int i = 0; i < N; ++i) {
            int iter = Collections.binarySearch(dp, envelopes[i][1]);
            if (iter < 0)
                iter=Math.abs(iter)-1;

            if(iter == dp.size())
                dp.add(envelopes[i][1]);
            else if (envelopes[i][1] < dp.get(iter))
                dp.set(iter,envelopes[i][1]);
        }
        return dp.size();
    }
}
